-- worksheet_06 : chopping part 02
-- chopping and other technique for working with longer samples
-----------------------------------------------------------------------

let d1 = p 1 . (|< orbit 0) 
    d2 = p 2 . (|< orbit 1) 
    d3 = p 3 . (|< orbit 2) 
    d4 = p 4 . (|< orbit 3) 
    d5 = p 5 . (|< orbit 4) 
    d6 = p 6 . (|< orbit 5) 
    d7 = p 7 . (|< orbit 6) 
    d8 = p 8 . (|< orbit 7) 

-----------------------------------------------------------------------
-- using loopAt :
-- loopAt sets the speed control, and also sets 'unit' to 'c', which
-- tells superdirt to treat the speed as a cycle duration, 
-- speeding the sound up or slowing it down to match :

d1 $ loopAt 2 $ s "CL_SL:117"

setcps 0.45

-----------------------------------------------------------------------
-- we can use loopAt with chop, to get perfectly contiguous sound
-- grains. (contiguous here means lined up one after another, without gaps)

d1 $ loopAt 2 $ chop 8 $ s "CL_SL:117"

-----------------------------------------------------------------------
-- now we can get to patterning the grains :

d1 $ rev $ iter 4 $ loopAt 2 $ chop 8 $ s "CL_SL:124"

-----------------------------------------------------------------------
-- SLICE and SPLICE
-- slice and splice offer a whole other way to chop up sounds, using patterns.
-- we still give the number of slices or grains, but also give a pattern which
-- indexes into those grains.
-- we can play them in order :

d1 $ loopAt 1 $ slice 8 "0 1 2 3 4 5 6 7" $ s "CL_SL:124"

-----------------------------------------------------------------------
-- or in another order :

d1 $ loopAt 1 $ slice 8 "0 2 1 5 3 4 6*2 7" $ s "CL_SL:124" # speed "0.5"

-----------------------------------------------------------------------
-- or pattern it :

d1 $ loopAt 1 $ slice 8 (iter 4 "0 1 2 3 4 5 6 7") $ s "CL_SL:201"

d1 $ silence
