{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
\cocoascreenfonts1{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue255;\red0\green115\blue0;\red0\green0\blue191;
\red51\green51\blue191;\red191\green0\blue0;\red96\green96\blue96;\red255\green102\blue0;}
\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs32 \cf0 (\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 var\cf0  fundamental;\
\cf2 var\cf0  hub, speakers, interpreter, machines, states;\
\cf2 var\cf0  tuning = \cf3 \\et12\cf0 ;\
\cf2 var\cf0  scale = \cf3 \\minor\cf0 ;\
\cf2 var\cf0  screendimension = \cf4 Window\cf0 .screenBounds.height;\
\
\cf2 var\cf0  dev = \cf5 true\cf0 ;\
\cf2 var\cf0  channels = 2;\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf6 // s.meter;\cf0 \
\
w = \cf4 Window\cf0 (\cf7 "drone"\cf0 , \cf4 Rect\cf0 (0, 0, screendimension, screendimension), resizable:\cf5 false\cf0 , border:\cf5 false\cf0 ).front;\
\
if(dev.not, \{ w.fullScreen \});\
\
w.view.background = \cf4 Color\cf0 .white;\
\
\cf6 //fundamental = 
\fs18 36.midicps; // in C
\fs32 \cf0 \
fundamental = 55; \cf6 // + (20.rand); // remove rand (just here to remove stress from ears)\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf4 DroneSynths\cf0 .new(loadsamples: \cf5 false\cf0 );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf6 // DroneLimiter.activate;\cf0 \
\
\cf6 // Drone - the key class of each drone\cf0 \
\cf6 // DroneMachine - the class containing the diverse machines\cf0 \
\cf6 // DroneGUI\cf0 \
\cf6 // DroneChord / DroneSatellites / DroneGroup\cf0 \
\
hub = \cf4 DroneHub\cf0 .new( w ); \cf6 // - all key data accessible to other classes\cf0 \
states = \cf4 DroneStates\cf0 .new( hub ); \cf6 // - storing states and recording/playing scores\cf0 \
hub.registerStates( states );\
speakers = \cf4 DroneSpeakers\cf0 .new( hub, channels, fundamental ); \cf6 // drawing background\cf0 \
hub.registerSpeakers( speakers );\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf8 ~drones\cf0  = \cf4 DroneController\cf0 .new( hub, tuning, scale, fundamental); \cf6 // - main interface\cf0 \
hub.registerDrones( \cf8 ~drones\cf0  );\
interpreter = \cf4 DroneInterpreter\cf0 .new( hub, dev:dev); \cf6 // - the 'console' for live coding\cf0 \
hub.registerInterpreter( interpreter );\
)\
\
\
1) The Drone \
\
The Drone is the core musical element of the system. It is a musical note, but it knows it is part of a chord itself. It contains the following properties with related methods. There are relative methods that allow an easy shift dependent on the current state. So relLengt_(30) would increase both a 100 and a 20 degree drone by 30 degrees. This is useful also if changing the pitch/ratio/degree of a chord, group or satellites. \
\
.tonic_\
.relTonic_\
.freq_\
.relFreq_\
.ratio_\
.relRatio_\
.degree_\
.relDegree_\
.octave_\
.relOctave_\
.transpose_\
.interval_\
.harmonics_\
.resonance_\
.amp_\
.relAmp_\
.speed_\
.relSpeed_\
.angle_\
.rotation_\
.length_\
.relLength_\
.selected_\
.tuning_\
.scale_\
.chord_\
.chordnote_\
.env_\
.set  - sets parameters of the synth\
.addMIDI\
.removeMIDI\
.addFunc\
.interpret\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf6 // to report on its state\cf0 \
.state\
.methods\
\
2) Chords\
\
3) Satellites\
\
4) Groups\
\
5) Machines\
\
6) GUI\
\
7) Interfacing (MIDI, OSC, Twitter)\
\
\cf6 /*\
~drones.killAll\
\
\pard\pardeftab560

\fs18 \cf6 ~drones.playMIDI("/Users/thor/Downloads/WTK/s00016.mid");\
~drones.stopMIDI\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs28 \cf6 ~drones.createSatellites(\\tri, \\minor, 4, length:120, num:10)
\f0\fs18 \
\pard\pardeftab560

\fs32 \cf6 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf6 w.close\
s.meter\
s.freqscope\
\
~drones.drawspeakers = true\
~drones.drawharmonics = false\
~drones.drawscale = true\
~drones.drawoctaves = true\
~drones.scale = \\
\f2\fs26 \cf0 minor
\f0\fs32 \cf6 \
\
~drones.createDrone(\\tri, 4, 2, name:\\buk)\
~drones.droneDict[\\buk].playRatios()\
~drones.droneDict[\\buk].playDegrees()\
~drones.droneDict[\\buk].playScale()\
\
\
~drones.redraw\
\
~drones.playComposedScore(\\vello)\
~drones.playComposedScore(\\test)\
\
GUI.qt\
thisThread.randSeed = 333;\
~drones.createDrone(\\saw, 1, 3, 0.1, 1, octave:3);\
~drones.createDrone(\\saw, 4, 5, 0.2, 1);\
\
-- DRONE METHODS --\
\
--> GUI METHODS < --\
xxx.param(\\ratio, 1, 5) // automate parameters of drone from GUI\
xxx.param(\\ratio, 1, 5, 1) // round it to an integer\
xxx.setparam(\\harmonics, 1, 4) // set param once\
xxx.setparam(\\harmonics, 1, 4, 1) // round it to an integer\
xxx.clearauto\
xxx.auto = true // false\
\
xxx.addFunc(\\name, \{|ixi| ixi.harmonics_(rrand(2, 8))\}, 2)\
// same as addFunc, but no routine\
xxx.interpret(\{| ixi | ixi.harmonics_(rrand(2, 8))\})\
\
xxx.addMIDI(transp:0, time)\
xxx.removeMIDI()\
\
keys 1-9 play indices of the drone's scale\
\
~drones.droneArray[0].resonance_(true)\
~drones.droneArray[0].resonance_(3, 5)\
~drones.droneArray[0].ratio_(3, 10)\
\
~drones.droneArray[0].ratio_(3/2*2, 1)\
\
\
~drones.droneArray[1].type_(\\sine)\
~drones.droneArray[0].set(\\envtime, 1)\
\
~drones.createDrone(\\saw, 6, 5, 0.09, 1, 50, angle: 100, speed:10, ratio:5, name:\\oso);\
~drones.createDrone(\\saw, 1, 9, 0.09, 1, 50, angle: 200, speed:10, name:\\oo);\
~drones.createDrone(\\saw, 4, 2, 0.09, 1, 50, angle: 300,speed:30, name:\\xx);\
\
~drones.defineGroup(\\loki, [ \\oso, \\oo]);\
~drones.droneArray[2].angle\
\
\
// not really used, but\
~drones.groupDict[\\oya_grp_loki].perform(".harmonics = 3")\
// is the same as\
oya_grp_loki.harmonics = 3 \
\
\
~drones.defineGroup(\\loks, \\oso, \\oo);\
~drones.killAll\
~drones.createGroup(\\loki);\
~drones.groups;\
\
w.close\
\
~drones.createDrone(\\saw, 4, 3, 0.09, 1, 340);\
~drones.createDrone(\\saw, 4.099, 3, 0.09, 1, 340);\
~drones.createChord(\\saw, \\minor, 5, 2, 0.09, 1, 150);\
\
~drones.interpret(\{ 10.do(\{|i| ~drones.createDrone(\\saw, 1+i, 3, 0.3, 360-(i*30), 20, 25*(i+1)) \}) \})\
~drones.interpret(\{ 10.do(\{|i| ~drones.createDrone(\\saw, 1+i, 3, 0.3, 36-(i*3), 20, 25*(i+1)) \}) \})\
\
~drones.interpret(\{ 10.do(\{|i| ~drones.createDrone(\\tri, 4+i, 2, 0.3, 3, 20, 25*(i+1)) \}) \})\
\
~drones.interpret(\{ 10.do(\{|i| ~drones.createDrone(\\tri, 2+(8.rand), 2, 0.3, 3, 10, 36*(i+1)) \}) \})\
10.do(\{|i| ~drones.createDrone(\\saw, 5, 2, 0.2, 5, 5, 36*(i+1) +10.rand2) \})\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f1\fs28 \cf6 ~drones.interpret(\{|i| ~drones.createDrone(\\saw, 4+i, 2, length:20, speed:10+i)\})\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\f0\fs32 \cf6 \
~drones.killAll\
~drones.droneArray[0].degree_(1, 2)\
\
~drones.droneArray[0].resonance_(true);\
~drones.droneArray[0].resonance_(4, 6);\
\
~drones.droneArray[0].ratio_(1, 0.5)\
\
~drones.droneArray.do(\{arg drone; drone.degree.postln;\})\
\
~drones.createDrone(\\saw, 2, 3, 0.1, 1, ratio:1, name:\\yoo);\
~drones.createDrone(\\saw, 2, 3, 0.09, 1, ratio:5, name:\\apa);\
~drones.createDrone(\\saw, 2, 3, 0.1, 1, ratio:8, name:\\ffa);\
~drones.defineChord(\\mychord, [\\yoo, \\apa, \\ffa])\
\
~drones.createDrone(\\saw, 5, 3, 0.09, 1);\
~drones.scale = \\minor;\
\
~drones.createMachine(\\scale, \\all, 115, 1, 1); // working\
~drones.createMachine(\\chord, \\all, 10, 2, 2, 2); // working\
~drones.createMachine(\\amp, \\all, 60, 5, 2, 1); // working\
~drones.createMachine(\\harmonics, \\all, 30, 5, 2, 5); // working\
 \
~drones.killMachines\
~drones.killMachine(\\pzi_mach)\
~drones.machineArray[0].name\
~drones.machineDict\
~drones.machineArray[0].kill()\
\
\
\
~drones.droneArray.do(\{arg drone; drone.degree.postln;\})\
\
~drones.createMachine(\\create, \\all, 10, 0.2, 1.5); // not working\
~drones.createMachine(\\amp, \\all, 10, 0.2, 1.5); // not working\
~drones.createMachine(\\arpeggios, \\all, 10, 0.2, 1.5); // not working\
~drones.createMachine(\\neutral, \\all, 10, 0.2, 1.5); // not working\
\
\
~drones.createDrone(\\tri, 4, 3, 0.1, 1);\
~drones.createDrone(\\tri, 2, 3, 0.1, 1);\
~drones.createDrone(\\cub, 4, 3, 0.1, 1);\
\
~drones.createDrone(\\pulse, 4, 3, 0.1, 1);\
~drones.createDrone(\\tri, 4, 3, 0.1, 1);\
~drones.createDrone(\\tri, 4, 3, 0.1, 1);\
\
s.volume.volume = -36 // dB\
*/\cf0 \
\
\
\cf6 //6.do(\{|i| ~drones.createDrone(\\saw, 1+i, 3, 0.3, 3, 30, 40*(i+1)) \})\cf0 \
\
\
\cf6 // d.(\\saw, 2, 4, 0.1, 1, 300, 223)\cf0 \
\
\cf6 /*\
\
~drones.createMachine(\\amp );\
\
\
~drones.tuning_(\\wcSJ)\
\
w.close\
s.plotTree\
\
3.do(\{ ~drones.createDrone(\\saw, 1+(8.rand), 1+(8.rand), 0.3, 2.0.rand, 330.rand, 320.rand) \})\
\
\
~drones.createMachine(\\amp, time:1);\
\
~drones.createMachine(\\test, time:1);\
~drones.createMachine(\\amp, \\aspy, time:1);\
~drones.createMachine(\\amp, time:1);\
\
~drones.createMachine(\\test);\
TempoClock.default.tempo\
\
s.meter\
s.boot; DroneSynths.new; ////////////////////\
\
~drones.createDrone(\\saw, 5, length:, speed:-120)\
\
~drones.createChord(\\saw, [1, 6, 12]+24, 1)\
~drones.createChord(\\sine, 'minor', 8, 3, 0.1)\
\
~drones.createSatellites(\\saw, \\iwato, 1, 2, spread: 1, num:10)\
~drones.createSatellites(\\sine, \\minor, 2, 4, spread: 3, num:16)\
~drones.createSatellites(\\cub, \\minor, 3, 2, spread: 1, num:16)\
~drones.createSatellites(\\saw, \\iwato, 2, 4, spread: 1, num:16)\
\
~drones.killSatellites\
.transpose_()\
\
\
~drones.scale_(\\minor)\
~drones.tuning_(\\et12)\
\
\
~drones.killAll\
~drones.chordDict\
~drones.droneArray[0].alpha\
~drones.names\
\
w.close\
~drones.droneArray[0].setAlpha = 0.35\
\
~drones.createDrone(\\saw, 1+(8.rand), 1+(8.rand), 0.3, 2.0.rand, 330.rand, 320.rand)\
\
// TODO: get rid of "angle" and just use rotation.\
\
3.do(\{ ~drones.createDrone(\\saw, 1+(8.rand), 1+(8.rand), 0.3, 2.0.rand, 330.rand, 320.rand) \})\
\
~drones.selected\
\
~drones.droneArray[0].getName\
~drones.droneArray[0].alpha\
\
~drones.droneArray[2].tuning \
\
~drones.tuning = \\vallotti\
\
\
s.boot\
s.meter\
~drones.droneArray[0].selected = true\
\
// methods that change the look\
~drones.droneArray[0].tonic_(1)\
~drones.droneArray[0].harmonics_(3)\
~drones.droneArray[0].harmonics_(7)\
~drones.droneArray[0].ratio_(3)\
~drones.droneArray[0].amp_(0.4)\
~drones.droneArray[1].speed_(10)\
~drones.droneArray[0].angle_(0)\
~drones.droneArray[0].angle_(90)\
~drones.droneArray[0].angle_(180)\
~drones.droneArray[0].angle_(270)\
~drones.droneArray[0].angle_(360)\
~drones.droneArray[0].length_(50) // from 0 to 100\
\
\
~drones.droneArray[0].ratio_(8)\
~drones.droneArray[0].fundamental_(55)\
\
\
~drones.droneArray[0].ratio_(1)\
~drones.droneArray[0].ratio_(2)\
~drones.droneArray[0].ratio_(3)\
~drones.droneArray[0].ratio_(4)\
~drones.droneArray[0].ratio_(5)\
~drones.droneArray[0].ratio_(6)\
~drones.droneArray[0].ratio_(7)\
~drones.droneArray[0].ratio_(8)\
~drones.droneArray[0].ratio_(9)\
~drones.droneArray[0].ratio_(10)\
~drones.droneArray[0].ratio_(11)\
~drones.droneArray[0].ratio_(12)\
~drones.droneArray[0].ratio_(13)\
~drones.droneArray[0].ratio_(14)\
~drones.droneArray[0].ratio_(15)\
~drones.droneArray[0].ratio_(16)\
~drones.droneArray[0].ratio_(17)\
~drones.droneArray[0].ratio_(18)\
~drones.droneArray[0].ratio_(19)\
~drones.droneArray[0].ratio_(20)\
~drones.droneArray[0].ratio_(21)\
~drones.droneArray[0].ratio_(22)\
~drones.droneArray[0].ratio_(23)\
~drones.droneArray[0].ratio_(24)\
~drones.droneArray[0].ratio_(25)\
~drones.droneArray[0].ratio_(26)\
~drones.droneArray[0].ratio_(27)\
~drones.droneArray[0].ratio_(28)\
~drones.droneArray[0].ratio_(29)\
\
~drones.droneArray[0].degree_(1)\
~drones.droneArray[0].degree_(2)\
~drones.droneArray[0].degree_(3)\
~drones.droneArray[0].degree_(4)\
~drones.droneArray[0].degree_(5)\
~drones.droneArray[0].degree_(6)\
~drones.droneArray[0].degree_(7)\
~drones.droneArray[0].degree_(8)\
~drones.droneArray[0].degree_(9)\
~drones.droneArray[0].degree_(10)\
~drones.droneArray[0].degree_(11)\
~drones.droneArray[0].degree_(12)\
~drones.droneArray[0].degree_(13)\
~drones.droneArray[0].degree_(14)\
~drones.droneArray[0].degree_(15)\
~drones.droneArray[0].degree_(16)\
~drones.droneArray[0].degree_(17)\
~drones.droneArray[0].degree_(18)\
~drones.droneArray[0].degree_(19)\
~drones.droneArray[0].degree_(20)\
~drones.droneArray[0].degree_(21)\
~drones.droneArray[0].degree_(22)\
~drones.droneArray[0].degree_(23)\
~drones.droneArray[0].degree_(24)\
~drones.droneArray[0].degree_(25)\
~drones.droneArray[0].degree_(26)\
~drones.droneArray[0].degree_(27)\
~drones.droneArray[0].degree_(28)\
~drones.droneArray[0].degree_(29)\
\
f = fork\{inf.do(\{ \{~drones.droneArray[0].degreeratio_(19.rand);\}.defer; 0.5.wait \}) \}.play\
\
~drones.droneArray[0].chordnote_(1)\
~drones.droneArray[0].chordnote_(2)\
~drones.droneArray[0].chordnote_(3)\
\
f = fork\{inf.do(\{ \{~drones.droneArray[2].chordnote_(19.rand);\}.defer; 0.5.wait \}) \}.play\
\
\
// methods that change the sound\
~drones.droneArray[0].set(\\oscfreq, 0.25)\
~drones.droneArray[0].set(\\amp, 0.31, \\oscamp, 0.25)\
\
~drones.droneArray[0].set(\\oscamp, 1.0)\
~drones.droneArray[0].set(\\freqmoddep, 1)\
~drones.droneArray[0].set(\\freqmodarr, 1.5)\
~drones.droneArray[0].set(\\freqmodtime, 100)\
~drones.droneArray[0].set(\\freqmodlinegate, 1)\
\
\
// set parameters of a unique drone\
~drones.droneArray[0].set(\\freq, 444.5)\
\
\
fork\{\
	~drones.envtime_(0.03);\
	inf.do(\{\
		\{\
		var name = "thorlokiman".scramble;\
		~drones.createDrone('saw', 5.rand, 2, 0.4, 0, 80, [220, 40].choose, name:name, ratio:[1, 4, 8, 13].choose);\
		\{~drones.droneDict[name.asSymbol].kill\}.defer(1.5.rand);\
		\}.defer;\
		(0.1+(1.0.rand)).wait;		\
	\})\
\}\
\
w.close\
~drones.killAll\
*/\cf0 \
}