-- tidal club week3 lesson 1
-- the every function and the meaning of $
-----------------------------------------------------------------------

let d1 = p 1 . (|< orbit 0)
    d2 = p 2 . (|< orbit 1)
    d3 = p 3 . (|< orbit 2)
    d4 = p 4 . (|< orbit 3)
    d5 = p 5 . (|< orbit 4)
    d6 = p 6 . (|< orbit 5)
    d7 = p 7 . (|< orbit 6)
    d8 = p 8 . (|< orbit 7)

-----------------------------------------------------------------------

d1 $ note (scale "minor" $ snowball 4 (+) (slow 2) $ (run 3))
  # s "midi"
  # midichan "2"
  # amp 0.7
  # orbit 0

-- 'every' is one of a family of Tidal functions, that takes another
-- function as one of its inputs.
-- Let's say we had a simple pattern like this:

d1 $ s "HBH:40 HBH:88 ~ HBH:43"
  # legato 1
  # orbit 0

hush

-- ... and we wanted to speed it up like this:

d1 $ fast 2 $ s "HBH:420 HBH:403 ~ HBH:404"
  # legato 1
  # orbit 0

-- ... but only one cycle out of three.
-- Here's how we'd use 'every' to do that:

d1 $ every 3 (fast 2) $ s "HBH:420 HBH:403 ~ HBH:404"
  # legato 1
  # orbit 0

-- You can read this as "every 3rd cycle, make 'sound "bd sd ~ cp"',
-- go faster by a factor of two."

-- We'll take this apart to work out why we sometimes use (), and
-- sometimes '$' later. First, lets look at more, practical examples
-- of using 'every'.

-- We can use every with any function that takes single pattern as
-- input (and returns a transformed version as output). For example,
-- we can use 'hurry' instead of fast:

hush

d1 $ every 3 (hurry 2) $ s "HBH:33 HBH:34 [~ HBH:30] [HBH:38 HBH:30*2]"
  # legato 1
  # orbit 0

-- Or use 'rev':

d1 $ every 3 (rev) $ s "HBH:113 HBH:114 [~ HBH:110] [HBH:111 HBH:110*2]"
  # legato 1
  # orbit 0

-- Because 'rev' is a single word, we don't actually need to put it in
-- parenthesis:
-- Here's a trick with using effects as functions..
-- Lets look at this:

d1 $ s "HBH:21 HBH:10 [~ HBH:21] [HBH:19 HBH:21*2]"
  # squiz 5
  # legato 1
  # orbit 0

hush


-- We can treat the '# squiz 5' bit as a function. If you think about
-- it, it does something to a pattern, just like 'fast 2' does.


d1 $ every 3 (# squiz 5) $ s "HBH:22 HBH:23 [~ HBH:39*2]"
  # legato 1
  # orbit 0

-- You can also add more than one 'every' manipulation, giving them
-- different periods for their first input, to create longer form
-- variety:

d1 $ every 2 (hurry 2) $ every 3 (# squiz 5) $ s "HBH:22 [~ HBH:23]"
  # legato 1
  # orbit 0

-- keep going..

d1 $ every 4 rev $ every 2 (hurry 2) $ every 3 (# squiz 5)
  $ s "HBH:23 [~ HBH:22]"
  # legato 1
  # orbit 0

hush

-- In Tidal, the pattern that a function is manipulating is generally
-- its final input, which makes it easy to 'chain together' functions
-- like this.

-- Ok as promised, lets go back to our original, simple example:

d1 $ every 3 (fast 2) $ sound "POOL:23 POOL:3"
  # legato 1
  # orbit 0

-- Lets go through the three 'inputs' (also sometimes called
-- 'parameters' or 'arguments') for every.

-- [a] 3 - how often a function is applied
-- [b] fast 2 - the function that is applied
-- [c] sound "bd sd ~ cp" - the pattern that it's applied to.

-- Looking again at this pattern, you can see that the inputs are
-- given in three different ways:

-- '3' is just on its own. It's a single number so tidal has no
-- problem knowing it's a single input.

-- 'fast 2' is in parenthesis '(fast 2)'. Then the word 'fast' and
-- number '2' are grouped together into a function, _before_ being
-- passed to 'every' as its second input.

-- 'sound "bd sd ~ cp"' has $ in front. We *could* have done this
-- instead:

d1 $ every 3 (fast 2) (sound "POOL:24") # legato 1 # orbit 0


-- That works fine, but '$' does the same kind of job. It passes
-- what's on its left, to the function on its right, as a single
-- parameter. '$' has really low priority, which means everything on
-- its right is worked out first before being passed to the left.


-- This saves you from having to match up ( and ) around a function's
-- final input. It doesn't work with anything other than the final
-- input, so unfortunately this _doesn't_ work

d1 $ every 3 $ fast 2 $ s "POOL:24"

-- The above would work out 'fast 2 $ sound "bd sd ~ cp"' first, and
-- would then try to pass that to 'every' as its second parameter,
-- which doesn't make sense to tidal, so it returns an error.

-- Note that when Tidal makes an error, if there was already a
-- pattern running, it will keep that going. If you're live coding
-- in front of an audience, you probably don't want an error to
-- result in silence!


hush
