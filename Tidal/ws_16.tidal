-- worksheet_16 : repeating events
-----------------------------------------------------------------------

let d1 = p 1 . (|< orbit 0) 
    d2 = p 2 . (|< orbit 1) 
    d3 = p 3 . (|< orbit 2) 
    d4 = p 4 . (|< orbit 3) 
    d5 = p 5 . (|< orbit 4) 
    d6 = p 6 . (|< orbit 5) 
    d7 = p 7 . (|< orbit 6) 
    d8 = p 8 . (|< orbit 7) 

-----------------------------------------------------------------------
-- PLY and PLYWITH

d1 $ note "0 2 [~ 3] 4" # s "H_MOO:7" # legato 1 # amp 0.3

-----------------------------------------------------------------------
-- the ply function repeats each event a given number of times 
-- within its time frames :

d1 $ ply 2 $ note "0 2 [~ 3] 4" # s "H_MOO:8" # legato 1 # amp 0.3

-----------------------------------------------------------------------
-- we can pattern that number :

d1 $ ply "2 3" $ note "0 2 [~ 3] 4" # s "H_MOO:9" # legato 1 # amp 0.2

d1 $ ply "<2 3>" $ note "0 2 [~ 3] -4" # s "H_MOO:14" # legato 1 # amp 0.2

-----------------------------------------------------------------------
-- plyWith does the same but with the ability to successively apply
-- a function to each repeat.

d1 $ note "0 2" # s "H_MOO:15" # legato 2 # amp 0.2

-----------------------------------------------------------------------
-- multiply up the speed for each ply :
-- the first note will not be changed, the second will be sped up by 1.4,
-- the third by 1.4*1.4 (1.96), the fourth by 1.4*1.4*1.4 (1.75) and so on.

d1 $ plyWith 8 (|* speed 1.4) $ note "0 2" # s "H_MOO:15" # legato 1 # amp 0.2

-----------------------------------------------------------------------
-- a lot of possibilities :

d1 $ jux rev $ plyWith 3 (|* speed 1.4) $ note "0 [2 [3 4]]"
  # s "H_MOO:15"
  # legato 1
  # amp 0.2

-----------------------------------------------------------------------
-- we can even manipulate time for each ply, but good luck trying to work out
-- what's happening :

d1 $ plyWith "<3 4>" (fast 2 . (|* speed 1.4)) $ note "0 ~ 2 3" 
  # s "H_MOO:15"
  # legato 1
  # amp 0.2

-----------------------------------------------------------------------
-- STUT AND STUTWITH
-- stut is similar to ply, but repeats a sound using a fixed cycle offset,
-- with each repeat a bit quieter than the last.
-- the following will repeat each sound 4 times, the gain multiplied by 
-- a factor of 0.7 each time (get quieter), and 1/16th of a cycle apart :

d1 $ stut 4 0.7 (1/16) $ n "0 [3 5] 4 2" 
  # s "H_MOO:15" 
  # legato 1 

-----------------------------------------------------------------------
-- we can have really small offsets to create an interesting comb effect :

d1 $ stut 4 0.7 (1/128) $ n "0 [3 5] 4 2"
  # s "H_MOO:15"
  # legato 1

-----------------------------------------------------------------------
-- we can pattern those numbers :

d1 $ stut "<4 3 5>" 0.7 "<0.125 0.08>" $ n "0 [3 5] 4 2"
  # s "H_MOO:18"
  # legato 2
  # amp 0.2

-----------------------------------------------------------------------
-- even using a continuous pattern :

d1 $ stut 4 0.7 (slow 8 $ (1/32) * sine) $ n "0 [3 5] 4 2"
  # s "H_MOO:18"
  # legato 2
  # amp 0.2

-----------------------------------------------------------------------
-- note that 'rev' reverses the stuttered pattern, making it louder :

d1 $ jux (rev) $ stut 8 0.5 (slow 8 $ (1/32) * sine) $ n "0 [3 5] 4 2"
  # s "H_MOO:18"
  # legato 2
  # amp 0.2

-----------------------------------------------------------------------
-- instead of reversing the whole pattern, we can specify a negative
-- offset, giving the sounds a kind of preverb. compare :

d1 $ stut 8 0.5 (-1/32) $ n "0 [3 5] 4 2"
  # s "H_MOO:18"
  # legato 2
  # amp 0.2


d1 $ stut 8 0.5 (1/32) $ n "0 [3 5] 4 2"
  # s "H_MOO:18"
  # legato 2
  # amp 0.2

-----------------------------------------------------------------------
-- instead of changing the gain, 'stutWith' applies successively any 
-- function, much like 'plyWith'. 
-- we again apply the number of repeats, then the gap between repeats in cycles,
-- and the function.

d1 $ stutWith 4 (1/8) (|* speed 1.5) $ n "0 [3 5] 4 2"
  # s "H_MOO:18"
  # legato 2
  # amp 0.2

-----------------------------------------------------------------------
-- try adding to the note value instead :

d1 $ stutWith 4 (1/8) (|+ note 7) $ n "0 [3 5] 4 2"
  # s "H_MOO:18"
  # legato 2
  # amp 0.2

-----------------------------------------------------------------------
-- delaying in thirds is a sure way of making techno go a bit funky :

d1 $ stutWith 4 (1/3) (|* speed 1.5) . (|- note 1) $ n "0 [3 5] 4 2"
  # s "H_MOO:20"
  # legato 1
  # amp 0.2

d1 $ silence

-----------------------------------------------------------------------
