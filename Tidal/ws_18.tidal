-- worksheet_18 : randomness part_02
-----------------------------------------------------------------------

let d1 = p 1 . (|< orbit 0) 
    d2 = p 2 . (|< orbit 1) 
    d3 = p 3 . (|< orbit 2) 
    d4 = p 4 . (|< orbit 3) 
    d5 = p 5 . (|< orbit 4) 
    d6 = p 6 . (|< orbit 5) 
    d7 = p 7 . (|< orbit 6) 
    d8 = p 8 . (|< orbit 7) 

-----------------------------------------------------------------------
-- we already met the rand function, which gives us a continuous
-- stream of random numbers, from 0 to 1 :

d1 $ s "H_MOO:23*4" |< speed (range 1 4 rand)
  # legato 1
  # amp 0.5

-----------------------------------------------------------------------
-- if we run resetCycles a few times while the above is playing,
-- we'll notice that the random stream is deterministic, always
-- returning the same values for the same point along the timeline of
-- cycles.

resetCycles

setcps 0.6

-----------------------------------------------------------------------
-- we can also loop the first cycle repeatedly with loopFirst :

d1 $ loopFirst $ s "H_MOO:27(5,8)" |< speed (range 1 4 rand)
  # legato 2
  # amp 0.4

-----------------------------------------------------------------------
-- or pick another sample to loop, by shifting the random pattern in time, with <~

d1 $ loopFirst $ s "H_MOO:33(5,11)" |< speed (1 <~ range 1 3 rand) 
  # legato 2
  # amp 0.4

-----------------------------------------------------------------------
-- irand
-- 'rand' makes floating point (decimal) numbers, whereas 'irand' makes
-- integral (whole) numbers. e.g. 'irand 8' gives us numbers form 0 to 7.

d1 $ s "H_MOO:54(5,8)" |< note (irand 8)
  # legato 1
  # amp 0.8


-----------------------------------------------------------------------
-- if we repeat each cycle twice, it stops sounding random. magic !


d1 $ repeatCycles 2 $ s "H_MOO:54(5,8)" |< note (irand 8)
  # legato 1
  # amp 0.6


-----------------------------------------------------------------------
-- choose
-- randomly choose between a particular set of values :

d1 $ s "CL_SL:10(5,8)" |< note (choose[ 0, 7, 12 ])
  # legato 2
  # amp 0.6
  # lpf 3000
  # lpq 0.3
  # room 0.2 
  # sz 0.7

-----------------------------------------------------------------------
-- cycleChoose
-- is similar but picks a value once per cycle :
d1 $ s "CL_SL:10(5,8)" |< note (cycleChoose[ 0, 7, 12 ])
  # legato 2
  # amp 0.6
  # lpf 8000
  # lpq 0.2
  # room 0.2 
  # sz 0.7

-----------------------------------------------------------------------
-- unwrap
-- join a pattern of patterns back into a pattern with 'unwrap' :

let foo = "a6 e"
in 
d1 $ s "CL_SL:10" >| note (unwrap $ cycleChoose [foo, "c e g a", "c e f g"])
  # lpf 3000
  # lpq 0.2
  # room 0.2
  # sz 0.7
  # legato 2
  # amp 0.6

-----------------------------------------------------------------------
-- lets pattern that a bit more :

d1 $ jux rev $ arpeggiate $ off 0.125 (|+ note "<12 7 24>")
  $ s "CL_SL:39" >| note (unwrap $ cycleChoose ["a6 e(3,8)", "c e g a*2", "c e*2 f g"])
  # lpf 3000 # lpq 0.2 # room 0.2 # sz 0.7 # legato 2 # amp 0.5

-----------------------------------------------------------------------
-- the trick is finding a nice balance between randomized variety and 
-- repeating structure around it.

d1 $ note "c cs fs g" # s (choose ["CL_SL:44", "CL_SL:56", "CL_SL:88"]) |+ note "<12 7>" 
  # lpf 3000 # lpq 0.2 # room 0.2 # sz 0.7 # legato 2 # amp 0.5

d1 $ silence

-----------------------------------------------------------------------
