-- tidal club : week 7 lesson 1 
-- composing patterns together
-----------------------------------------------------------------------

let d1 = p 1 . (|< orbit 0)
    d2 = p 2 . (|< orbit 1)
    d3 = p 3 . (|< orbit 2)
    d4 = p 4 . (|< orbit 3)
    d5 = p 5 . (|< orbit 4)
    d6 = p 6 . (|< orbit 5)
    d7 = p 7 . (|< orbit 6)
    d8 = p 8 . (|< orbit 7)

-----------------------------------------------------------------------

-- Composing patterns together

-- We've already looked at different ways of composing patterns
-- together. Something as simple as this is a composition:

d1 $ fast "1 2 3 4" $ sound "HBH:45" 
  # legato 1
  # gain 0.9
  # orbit 0

-- Not a super interesting one, but it composes together a pattern of
-- densities, and a pattern of sounds, to create a new pattern that is
-- more than the sum of its parts.
-- In this lesson though we're going to look at ways to compose what
-- you could call 'independent' patterns, where one isn't used to
-- manipulate the other.

-- Tidal is often used in live situations, but there are some
-- functions that help you assemble multiple patterns into something
-- like a complete 'piece', such as a structured four-minute track.
-- Before we get to that, lets look at some extra-simple ways of
-- composing patterns together.. as they can be surprisingly useful

-- First, there's `overlay` that simply plays the two given patterns
-- at the same time:

d1 $ overlay (fast "1 2 3 4" $ sound "HBH:45" # gain 0.9 # legato 1 # orbit 0)
             (sound "HBH:4(3,8)" # speed 2 # gain 0.7 # legato 1 # orbit 1)

-- Similar to this is `stack`, which lets you overlay any number of
-- patterns on top of each other. People tend to use this rather than
-- `overlay`, as it's more flexible:

d1 $ stack [(fast "1 2 3 4" $ s "HBH:45" # gain 0.9 # legato 1 # orbit 0),
            (s "HBH:4(3,8)" # speed 2 # gain 0.7 # legato 1 # orbit 1),
            s "[HBH:92(5,8), HBH:83(7,16,3)]" # gain 0.4 # legato 1 # orbit 2
           ]

-- 

d1 $ stack [(fast "1 2 3 4" $ s "HBH:45"),
            (s "HBH:4(3,8)" # speed 2),
            s "[HBH:92(5,8), HBH:83(7,16,3)]"
           ] 
           # gain 0.9 # legato 1 # orbit 0

-- The above composes a list of three patterns together. You can see that
-- a list is given using square brackets ('[' and ']'), with the patterns
-- in the list separated by commas (','). You have to remember *not* to
-- put a comma at the end of the list, only between the elements.

-- The above might not seem too useful, as you could do the same with
-- separate patterns. This sounds exactly the same as the above:

d1 $ fast "1 2 3 4" $ sound "lt mt ht ~"
d2 $ sound "clap:4(3,8)" # speed 2
d3 $ sound "[kick:5(5,8), snare:3(7,16,3)]"

-- Remember though that stack combines everything into a single
-- pattern. This is useful as you can manipulate all those patterns as
-- one. For example:

d1 $ chunk 4 (hurry 2) 
   $ stack [(fast "1 2 3 4" $ s "HBH:45"),
            (s "HBH:4(3,8)" # speed 2),
            s "[HBH:99(5,8), HBH:100(7,16,3)]"
           ] 
           # gain 0.9 # legato 1 # orbit 0

-- Or adding a parameter that applies to the whole stack:

d1 $ chunk 4 (hurry 2) 
   $ stack [(fast "1 2 3 4" $ s "SC:10"),
            (s "SC:10(3,8)" # speed 0.5),
            s "[SC:10(5,8), SC:10(7,16,3)]"
           ] 
           # legato 1 
           # squiz "<0 2>"
           # gain 0.9 
           # orbit 0 

-- So `overlay` and `stack` stack things up, so that they happen at
-- the same time. Howabout sticking things together over time, so they
-- happen one after another?

-- Like overlay and stack, there is one function, 'append' for
-- composing two patterns together, and another, 'cat' for composing a
-- list of patterns together.

-- For two patterns:

d1 $ append (fast "1 2 3 4" $ sound "SC:10")
            (sound "SC:11:4(3,8)" # speed 0.5)
            # legato 1
            # gain 0.9
            # orbit 0

-- For a list of patterns:

d1 $ cat [fast "1 2 3 4" $ sound "HBH:166",
          sound "HBH:167(3,8)" # speed 2,
          sound "[HBH:181(5,8), HBH:183(7,16,3)]"
         ]
         # legato 1
         # gain 0.9
         # orbit 0

-- Again, you'll see `cat` used more often than `append`.

-- `append` and `cat` maintain the original 'density' of the patterns,
-- taking one cycle per cycle.

-- There are variants `fastappend` and `fastcat`, that take a cycle
-- from each of the patterns, and squash them all into a single cycle:

-- For two patterns:

d1 $ fastappend (fast "1 2 3 4" $ sound "HBH:184 HBH:186 HBH:187 HBH:190")
                (sound "HBH:185(3,8)" # speed 2)
                # legato 1
                # gain 0.9
                # orbit 0

-- For a list of patterns:

d1 $ fastcat [fast "1 2 3 4" $ sound "HBH:191 HBH:192 HBH:193 ~",
              sound "HBH:221(3,8)" # speed 2,
              sound "[HBH:196(5,8), HBH:197(7,16,3)]"
             ]
             # legato 1
             # gain 0.9
             # orbit 0


-- That's fine, but what if you don't want to loop between patterns a
-- cycle at a time, but have something between a `stack` and a `cat`,
-- where you can have the patterns overlap? `seqPLoop` is one answer.

-- With `seqPLoop`, you say when each pattern starts and stops.
-- Lets first emulate the `cat` from earlier, by having each
-- pattern last one cycle.

d1 $ seqPLoop [(0, 1, fast "4 2" $ sound "HBH:227"),
               (1, 2, sound "HBH:252(3,8)" # speed 2),
               (2, 3, sound "[HBH:235(5,8), HBH:233(7,16,3)]")
              ]
              # legato 1
              # gain 0.9
              # orbit 0


-- Now let's adjust the starts and stops, so the first two overlap by
-- a pattern, then there's a gap of a cycle before the last one plays:

d1 $ seqPLoop [(0, 2, fast "4 2" $ sound "HBH:270"),
               (1, 3, sound "HBH:272(3,8)" # speed 2),
               (5, 6, sound "[HBH:235(5,8), HBH:233(7,16,3)]")
              ]
              # legato 1
              # gain 0.9
              # orbit 0


-- If you want to use the same pattern more than once, you can give it a name
--, like this:

let florence = fast "1 2 3 4" $ sound "CL_LO:224"
in
d1 $ seqPLoop [(0, 2, florence),
               (1, 3, sound "CL_LO:105(3,8)" # speed 2),
               (3, 4, sound "[CL_LO:97(5,8), CL_LO:98(7,16,3)]"),
               (3, 5, florence # coarse 5)
              ]
              # legato 1
              # gain 0.9
              # orbit 0

-- If you don't want the pattern sequence to loop, then use
-- seqP. You'll need to use something like `qtrigger`, so it starts
-- from cycle 0

d1 $ qtrigger 1 $ seqP [(0, 2, fast "4 2" $ sound "CL_LO:224"),
                        (1, 3, sound "CL_LO:225(3,8)" # speed 2),
                        (5, 6, sound "[CL_LO:226(5,8), CL_LO:227(7,16,3)]")
                        ]
                        # legato 1
                        # gain 0.9
                        # orbit 0

-- And don't forget that you can stack seqPLoops:

d3 $ stack [
    seqPLoop [
    (0, 2, s "CL_LO:224 CL_LO:224"),
    (1, 3, s "CL_LO:228*2 CL_LO:230"),
    (2, 4, s "CL_LO:232 CL_LO:235"),
    (4, 5, s "CL_LO:224 [CL_LO:238*2]")
    ],
    seqPLoop [
    (0, 2, s "CL_FL:24(3,8)"),
    (2, 4, s "CL_FL:24(5,8)"),
    (4, 5, s "CL_FL:24*4" # speed 1.1)
    ]
]
# legato 1
# gain 0.9
# orbit 0


hush
