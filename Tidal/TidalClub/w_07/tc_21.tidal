-- tidal club : week 7 lesson 2 
-- composing functions together
----------------------------------------------------------------------- 

let d1 = p 1 . (|< orbit 0)
    d2 = p 2 . (|< orbit 1)
    d3 = p 3 . (|< orbit 2)
    d4 = p 4 . (|< orbit 3)
    d5 = p 5 . (|< orbit 4)
    d6 = p 6 . (|< orbit 5)
    d7 = p 7 . (|< orbit 6)
    d8 = p 8 . (|< orbit 7)

-----------------------------------------------------------------------
-- Lets say you wanted to both chop up, _and_ reverse this pattern,
-- every 3 cycles.

d1 $ sound "HBH:10 [~ HBH:11] HBH:10 HBH:12" 
  # squiz 2
  # orbit 0

-- You could do it like this:

d1 
  $ every 3 (rev) 
  $ every 3 (chop 8) 
  $ sound "HBH:10 [~ HBH:11] HBH:10 HBH:12" 
  # legato 2
  # squiz 2
  # orbit 0

-- That works, but is a bit fiddly. This is where the `.` operator
-- comes in handy, by turning two functions into one:

d1 
  $ every 3 (rev . chop 8) 
  $ sound "HBH:20 [~ HBH:21] HBH:20 HBH:22" 
  # legato 2
  # squiz 2
  # orbit 0

-- That works the same, but with less typing, good!

-- You can just think of the `.` as piping together two functions
-- into one.

-- But technically speaking:, the `.` will take the input, pass it into the
-- function on the right, take the output from _that_ function, pass
-- it to the function on the left, and finally return the return of
-- _that_ function.

-- You can keep piping in more functions, if you want:

d1 
  $ every 3 (rev . chop 8 . slow 2) 
  $ sound "HBH:30 [~ HBH:34] HBH:30 HBH:32" 
  # legato 2
  # squiz 2
  # orbit 0

-- You can also add in effects:

d1 
  $ every 3 ((# room 0.7) . rev . chop 8 . fast 2) 
  $ sound "HBH:30 [~ HBH:34] HBH:30 HBH:32" 
  # legato 2
  # squiz 2
  # orbit 0

hush
