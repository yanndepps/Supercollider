-- tidal club week 2 lesson 3
-- combining patterns with arithmetic + the hurry function
-----------------------------------------------------------------------

let d1 = p 1 . (|< orbit 0)
    d2 = p 2 . (|< orbit 1)
    d3 = p 3 . (|< orbit 2)
    d4 = p 4 . (|< orbit 3)
    d5 = p 5 . (|< orbit 4)
    d6 = p 6 . (|< orbit 5)
    d7 = p 7 . (|< orbit 6)
    d8 = p 8 . (|< orbit 7)

-----------------------------------------------------------------------

d1 $ n "20 21 20 [24 14] 24 14 21*2 13"
  # s "H_MOO"
  # legato 1
  # speed "1 2"
  # orbit 0

d1 $ speed "1 2 0.5"
  # s "{ H_MOO:24, H_MOO:27 }"
  # legato 1
  # orbit 0

-- structure from the left, values from the right

d1 $ speed "1 2 0.5"
  # s "{ H_MOO:24, H_MOO:27 }"
  # speed "0.6 0.8"
  # legato 1
  # orbit 0

-- # is a shorthand for |>
-- change the direction the values are coming from

d1 $ speed "1 2 0.5"
  # s "{ H_MOO:24, H_MOO:27 }"
  -- |> speed "0.6 0.8"
  |< speed "0.6 0.8"
  # legato 1
  # orbit 0

d2 $ speed "1 2 0.5"
  # s "{ H_MOO:24, H_MOO:27 }"
  |> speed "0.6 0.8"
  -- |< speed "0.6 0.8"
  # legato 1
  # orbit 1

-- we can move the pipe |
-- means where the structure is coming from : >|

d2 $ speed "1 2 0.5"
  # s "{ H_MOO:24, H_MOO:25 }"
  >| speed "0.5 0.6"
  # legato 1.5
  # orbit 1

d2 $ speed "1 2 0.5"
  # s "{ H_MOO:24, H_MOO:25 }"
  |* speed "0.5 2.0"
  # legato 1.5
  # orbit 1

d2 $ speed "1 2 0.5"
  # s "{ H_MOO:24, H_MOO:25 }"
  *| speed "[ 0.5 1.0 ]/2"
  # legato 1.5
  # orbit 1

d2 $ speed "1 2 0.5"
  # s "{ H_MOO:24(3,8), [ H_MOO:25*2 H_MOO:27 ] }"
  |* speed "[ 0.5 1.0 0.3 ]/3"
  # legato 1.5
  # orbit 1

-- hurry speed both the pattern and playback rate of the sample

d1 $ fast 0.5 $ n "0 1 0 [2 4] 2 4 1*2 3"
  # s "H_LD"
  # legato 1
  # speed 0.5
  # orbit 0

d1 $ hurry "<2 [1 0.5] 1.5>" $ n "0 1 0 [2 4] 2 4 1*2 3"
  # s "H_GUI"
  # legato 1.2
  # orbit 0

hush

-- worksheet
-- Ok, so what happens when we specify a 'control' pattern (like e.g. n,
-- sound, speed, or squiz) more than once?

d1 $ n "7 8 ~ 5"
  # s "POOL"
  # legato 1
  # orbit 0

-- lets put than 'n' again, but with a different number:

d1 $ n "7 8 ~ 5"
  # s "POOL"
  # n "20"
  # legato 1
  # orbit 0

-- So.. you can hear that we still have the rhythmic structure from
-- the left, but all the values have been replaced with the one on the
-- right. That's what `#` does!

-- lets make that right hand pattern more complicated:


d1 $ n "0 1 ~ 2"
  # s "H_LP"
  # n "4 5"
  # legato 1
  # orbit 0

-- Now the 0 and 1 have been replaced with the 4, and the 2 has been
-- replace with the 5.
-- This is because tidal matches them up for you, based on where they
-- are in the cycle. The 0 and 1 start inside the first half, so are
-- replaced with '4'. The 2 starts inside the second half, so is
-- replace by '5'.

-- # is actually shorthand, for '|>'. There's a whole family of these:

-- |> is structure from the left, values from the right
-- <| is values from the left, structure from the right
-- |< is structure from the left, values from the left
-- >| is structure from the right, values from the right
-- |<| is values from the right, structure from both sides
-- |>| is values from the left, structure from both sides

-- < points to where the values come from, and | goes on the side where the
-- rhythmic structure comes from.

-- Everything from the left:

d1 $ n "0 4 0 4"
  # s "H_LP"
  |< n "4 5"
  # legato 1
  # orbit 0

-- Everything from the right:

d1 $ n "0 4 0 4"
  # s "H_LP"
  >| n "4 5"
  # legato 1
  # orbit 0

-- Rhythmic structure from left, values from the right:

d1 $ n "0 4 0 4"
  # s "H_LP"
  |< n "4 5"
  # legato 1
  # orbit 0

-- Values from the left, rhythmic structure from right:

d1 $ n "0 4 0 4"
  # s "H_LP"
  <| n "4 5"
  # legato 1
  # orbit 0

-- Values from the left, rhythmic structure from both sides:

d1 $ n "0 4 0 4"
  # s "H_LP"
  |<| n "4 5"
  # legato 1
  # orbit 0


-- The above use of |<| sounds the same as |<, because the rhythmic
-- structures line up.

-- This changes

d1 $ n "0 4 0"
  # s "H_LP"
  |>| n "4 5"
  # legato 1
  # orbit 0

-- Some gotchas!

-- Even though you are taking everything from one side, something
-- still has to match up on the other side..
-- So this makes no sound:

d1 $ n "~" # s "POOL" >| n "4 5" # legato 1 # orbit 0

-- Only the '4' sounds here:

d1 $ n "0 ~" # s "POOL" >| n "4 5" # legato 1 # orbit 0

-- Most of the time you'll be fine forgetting all this, and just using
-- |> , and its alias # .

-- However, there are other things you can do!

-- Instead of taking values from one side, you can add the values together, by
-- using '+' instead of '>' or '<'.

-- This:

d1 $ n "0 1 2 3" # s "CL_TH" |+ n "4 5" # legato 1 # orbit 0

-- adds up to:

d1 $ n "4 5 7 8" # s "CL_TH" # legato 1 # orbit 0

-- this:

d1 $ n "0 1 2 3" # s "CL_TH" +| n "4 5" # legato 1 # orbit 0

-- adds up to:

d1 $ n "4 7" # s "CL_TH" # legato 1 # orbit 0

-- This is because the rhythm comes from the left, from the "4 5", and
-- so we start from that. The start of 4 matches with 0, and the start
-- of 5 matches with 2, and adding them up, we end up with 4+0=4, and
-- 5+2 = 7.

-- This all gets complicated, especially when you work with patterns
-- with different numbers of steps..

d1 $ n "0 1 2 3" # s "CL_TH" +| n "24 15 19" # legato 1 # orbit 0

-- But don't worry too much. You just have to say what you want to
-- add together, let Tidal worry about working it out for you!

-- Ok that's enough numbers, lets put this into action with some
-- interesting patterns.

-- Here's one adding together 'n' patterns, using |+| to take
-- structure from both sides. On the right hand side, it uses the < >
-- mininotation syntax to pick a different subsequence per cycle.
-- The result is an interesting, longer form pattern:

d1 $ n "0 1 2 [3 5]" # s "CL_SA" |+| n "<[44 38 39] [44 55 49] [38 39]>"
  # legato 1.2
  # orbit 0

-- Here's a simpler example, cycling between three 12 note octaves, one per cycle:

d1 $ n "7 5 [2 7] 0" # s "H_GUI" |+ n "<-12 0 12>" # legato 1 # orbit 0

-- It's actually possible to apply these to patterns of numbers
-- _before_ they become control patterns, like this:

d1 $ n ("7 5 [2 7] 0" |+ "<-12 0 12>") # s "H_GUI" # legato 1 # orbit 0

-- You have to use parenthesis to make sure the two patterns are added
-- together, before being passed to the 'n'.

-- To be clear, this is a pattern of numbers:
-- "7 5 [2 7] 0"

-- This is a control pattern, because 'n' turns numbers into synthesiser
-- control patterns:
-- n "7 5 [2 7] 0"

-- This all works for effects too:

d1 $ n "30(5,8) [27 27]"
  # s "H_DR"
  # squiz "0 2 5" |+ squiz "<0 2 3>"
  # legato 1
  # orbit 0

-- Or again, you can add the number patterns, rather than the control
-- patterns. This is the same:

d1 $ n "24(5,8) [25 25]"
  # s "H_DR"
  # squiz ("0 2 5" |+ "<0 2 3>")
  # legato 1
  # orbit 0

-- 'saw' is a pattern that slowly moves from 0 to 1 over a cycle. Here
-- I'm slowing it down so it lasts 4 cycles, slowing increasing the
-- speed over that time:

d1 $ n "[0 4 2] [4 1] 3 [2 0] 3 [3 1] 4 4"
  # s "H_281"
  # speed "1 [2 3] 3" |+ speed (slow 4 saw)
  # legato 1
  # orbit 1




--

d1 $ n "[c6, g5, bf7]" # s "midi" # midichan "0" # amp 0.63

hush
